CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs
      frag: unlit-fs
      depthStencilState:
        depthTest: true
        depthWrite: true
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        diffuseTexture: { value: white }
        diffuseColor1: { value: [1, 1, 1, 1], editor: { type: color } }
        diffuseColor2: { value: [1, 1, 1, 1], editor: { type: color } }
        flickSpeed: { value: 1 }
        timeOffset: { value: 0 }
        alphaThreshold: { value: 0.5 }
        mainTiling: { value: [1, 1] }
        mainOffset: { value: [0, 0] }
  - name: transparent
    passes: 
      - stage: transparent
        vert: unlit-vs
        frag: unlit-fs
        depthStencilState:
          depthTest: true
          depthWrite: true
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          diffuseTexture: { value: white }
          diffuseColor1: { value: [1, 1, 1, 1], editor: { type: color } }
          diffuseColor2: { value: [1, 1, 1, 1], editor: { type: color } }
          flickSpeed: { value: 1 }
          timeOffset: { value: 0 }
          alphaThreshold: { value: 0.5 }
          mainTiling: { value: [1, 1] }
          mainOffset: { value: [0, 0] }
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <cc-local>
  #include <cc-global>
  #include <skinning>
  #include <input-standard>

  #define CC_USE_TEXTURE CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE

  #if CC_USE_TEXTURE
    out mediump vec2 v_uv0;
  #endif

  #if CC_USE_ATTRIBUTE_COLOR
    out lowp vec4 v_color;
  #endif

  void main () {
    StandardVertInput In;
    CCVertInput(In);

    #if CC_USE_ATTRIBUTE_COLOR
      v_color = In.color;
    #endif

    #if CC_USE_TEXTURE
      v_uv0 = In.uv;
    #endif

    gl_Position = cc_matViewProj * cc_matWorld * In.position;
  }
}%


CCProgram unlit-fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <output>
  #include <cc-global>

  uniform MAIN_TILING {
    vec2 mainTiling;
    vec2 mainOffset;
  };

  uniform UNLIT {
    lowp vec4 diffuseColor1;
    lowp vec4 diffuseColor2;
    float flickSpeed;
    float timeOffset;
  };

  #if USE_DIFFUSE_TEXTURE
    uniform sampler2D diffuseTexture;
  #endif

  #define CC_USE_TEXTURE CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE

  #if CC_USE_ATTRIBUTE_COLOR
    in lowp vec4 v_color;
  #endif

  #if CC_USE_TEXTURE
    in mediump vec2 v_uv0;
  #endif

  void main () {
    float t = (sin(cc_time.x * flickSpeed + timeOffset) + 1.0) * 0.5;
    vec4 color = mix(diffuseColor1, diffuseColor2, t);

    #if CC_USE_TEXTURE
      mediump vec2 v_uv_tiled = fract(v_uv0 * mainTiling + mainOffset);
      CCTexture(diffuseTexture, v_uv_tiled, color);
    #endif

    #if CC_USE_ATTRIBUTE_COLOR
      color *= v_color;
    #endif

    ALPHA_TEST(color);

    gl_FragColor = CCFragOutput(color);
  }
}%