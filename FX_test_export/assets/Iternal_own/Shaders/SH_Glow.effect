CCEffect %{
	techniques:
	- passes:
		- name: main
			stage: transparent
			vert: vs
			frag: fs
			rasterizerState:
				cullMode: none
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			properties:
				baseColor: { value: [1, 1, 1, 1], editor: { type: color, displayName: "Base Color" } }
				baseTexture:  { value: white }
				baseTexTillig: { value: [1, 1], editor: { displayName: "Tilling Texture"} }
				baseTexOffset: { value: [0, 0], editor: { displayName: "Offset Texture"} }
		- name: glow
			stage: transparent
			vert: glow-vs:vert
			frag: glow-fs:frag
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: none
			properties:
				glowWidth:     { value: 20 }
				depthBias:     { value: 0 }
				glowColor:     { value: [1, 1, 1, 1], editor: { type: color } }
				glowTexture:  { value: white }
				glowTexTillig: { value: [1, 1], editor: { displayName: "Tilling Texture"} }
				glowTexOffset: { value: [0, 0], editor: { displayName: "Offset Texture"} }
				intensity: 	{ value: 3 }
				smoothness:	{ value: 3 }
				deltaWidth:	{ value: 10 }
				velocity:	{ value: 3 }
		- name: shadowcast
			stage: shadowcast
			vert: shadow-map-vs
			frag: shadow-map-fs
			rasterizerState:
				cullMode: back
			depthStencilState:
				depthTest: true
				depthWrite: true
}%

CCProgram vs %{
	precision highp float;
	
	#include <cc-global>
	#include <cc-local>
	#include <input-standard>

	out vec2 v_uv;

	void main () {
		StandardVertInput v;
		CCVertInput(v);

		v_uv = v.uv;

		gl_Position = cc_matViewProj * cc_matWorld * v.position;
	}
}%

CCProgram fs %{
	precision highp float;

	#include <texture>

	in vec2 v_uv;

	uniform Main {
		vec4 baseColor;
	};

	#if USE_BASE_TEXTURE
		uniform sampler2D baseTexture;
		uniform BaseTexture {
			vec2 baseTexTillig;
			vec2 baseTexOffset;
		};
	#endif

	void main () {
		vec4 color = baseColor;

		#if USE_BASE_TEXTURE
			vec2 uv = fract(v_uv * baseTexTillig + ((vec2(1.0, 1.0) - vec2(1.0, 1.0) * baseTexTillig) * baseTexOffset));
			CCTexture(baseTexture, uv, color);
		#endif

		gl_FragColor = color;
	}
}%
 
CCProgram glow-vs %{
	precision highp float;
 
	#include <cc-global>
	#include <cc-local>
	#include <input-standard>
 
	out vec2 v_uv;
	out vec3 v_worldNormal;
	out vec3 v_worldPos;
	out vec3 v_viewDirection;
 
	uniform OutlineVert {
		float glowWidth;
		float depthBias;
	};

	#if IS_ANIMATING
		uniform AnimationVert {
			float deltaWidth;
			float velocity;
		};
	#endif
 
	vec4 vert () {
		StandardVertInput v;
		CCVertInput(v);
 
		float width = glowWidth;

		#if IS_ANIMATING
			width += ((sin(cc_time.x * velocity) + 1.0) / 2.0 * deltaWidth);
		#endif

		width *= 0.01;
 
		#if USE_POSITION_SCALING
			vec3 dir = normalize(v.position.xyz);
			float flip = dot(dir, normalize(v.normal)) < 0.0 ? -1.0 : 1.0;
			v.position.xyz += flip * dir * width * 2.0;
		#else
			v.position.xyz += normalize(v.normal) * width;
		#endif
 
		v_uv = v.uv;
		v_worldNormal = normalize((cc_matWorldIT * vec4(v.normal, 0)).xyz);
		v_worldPos = (cc_matWorld * v.position).xyz;
		v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);

		vec4 pos = cc_matViewProj * cc_matWorld * v.position;
		pos.z -= depthBias * 0.002;
 
		return pos;
	}
}%
 
CCProgram glow-fs %{
	precision highp float;

	#include <texture>
 
	in vec2 v_uv;
	in vec3 v_worldNormal;
	in vec3 v_worldPos;
	in vec3 v_viewDirection;
 
	uniform OutlineFrag {
		vec4 glowColor;
		float intensity;
		float smoothness;
	};
 
	#if USE_GLOW_TEXTURE
		uniform sampler2D glowTexture;
		uniform GlowTexture {
			vec2 glowTexTillig;
			vec2 glowTexOffset;
		};
	#endif

	float mulScalar (vec3 v1, vec3 v2) {
		return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
	}
 
	vec4 frag () {
		vec4 color = glowColor;
 
		#if USE_GLOW_TEXTURE
			vec2 uv = fract(v_uv * glowTexTillig + ((vec2(1.0, 1.0) - vec2(1.0, 1.0) * glowTexTillig) * glowTexOffset));
			CCTexture(glowTexture, uv, color);
		#endif

		float mul = mulScalar(v_viewDirection, v_worldNormal);

		if (mul <= 0.0) discard;
		
		float opacity =  (pow(mul, smoothness + 1.0) * intensity);

		if (opacity <= 0.0) discard;
		if (opacity > 1.0) opacity = 1.0;

		return vec4(color.rgb, opacity);
	}
}%
