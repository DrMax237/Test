// https://www.patreon.com/posts/gl3-shaders-part-36789746 

CCEffect %{
	techniques:
	- passes:
		- name: outline
			vert: outline-vs:vert
			frag: outline-fs:frag
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: front
			properties:		
				_Color: { value: [0.0, 0.0, 0.0, 0.0], editor: { type: color, displayName: "Base Color"} }
}%


CCProgram outline-vs %{
	precision highp float;
 
	#include <cc-global>
	#include <cc-local>
	#include <input-standard>
 
	out vec3 eyeVertex;
	out vec3 eyeNormal;
 	
	vec4 vert () {
		StandardVertInput In;
		CCVertInput(In);


		mat3 normalMatrix = mat3(
			cc_matViewInv[0][0], cc_matViewInv[1][0], cc_matViewInv[2][0],
			cc_matViewInv[0][1], cc_matViewInv[1][1], cc_matViewInv[2][1],
			cc_matViewInv[0][2], cc_matViewInv[1][2], cc_matViewInv[2][2]
		);

		eyeNormal = normalize(normalMatrix * vec3(-In.normal.x, -In.normal.y, -In.normal.z));
		eyeVertex = vec3((cc_matView) * In.position);
 
		vec4 pos = cc_matViewProj * cc_matWorld * In.position;

		return pos;
	}
}%
 
CCProgram outline-fs %{
	precision highp float;

 
	in vec3 eyeVertex;
	in vec3 eyeNormal;

	uniform OutlineFrag {
		vec4 _Color;
	};

	vec4 frag () {
		vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
		
		float dotEyeNorm = dot(normalize(-eyeVertex), normalize(eyeNormal));
		dotEyeNorm = max(0.0, dotEyeNorm);

		color = mix(_Color, color, smoothstep(0.2, 0.3, dotEyeNorm));

		if (color.a < 0.5) discard;

		return vec4(color.rgb, 1.0);
	}
}%