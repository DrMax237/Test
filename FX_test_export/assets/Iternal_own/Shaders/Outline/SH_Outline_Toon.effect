// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.
 
CCEffect %{
	techniques:
	- passes:
		- name: outline
			vert: outline-vs:vert
			frag: outline-fs:frag
			depthStencilState:
				depthTest: true
				depthWrite: true
			rasterizerState:
				cullMode: front
			properties:
				lineWidth:     { value: 10 }
				depthBias:     { value: 0 }
				outlineBaseColor:     { value: [0.0, 0.0, 0.0, 1.0], editor: { type: color } }
				outlineBaseColorMap:  { value: gray }
}%
 
CCProgram outline-vs %{
	precision highp float;
 
	#include <cc-global>
	#include <cc-local>
	#include <input-standard>
 
	out vec2 v_uv;
 
	uniform OutlineVert {
		float lineWidth;
		float depthBias;
	};
 
	vec4 vert () {
		StandardVertInput In;
		CCVertInput(In);
 
		float width = lineWidth * 0.001;
 
		#if USE_POSITION_SCALING
			vec3 dir = normalize(In.position.xyz);
			float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;
			In.position.xyz += flip * dir * width * 2.0;
			vec4 pos = cc_matViewProj * cc_matWorld * In.position;
		#else
			In.position.xyz += normalize(In.normal) * width;
			vec4 pos = cc_matViewProj * cc_matWorld * In.position;
		#endif
 
		pos.z -= depthBias * 0.002;
 
		v_uv = In.uv;
 
		return pos;
	}
}%
 
CCProgram outline-fs %{
	precision highp float;
	#include <cc-global>
	#include <cc-lights>
 
	#include <texture>
	#include <output>
 
	in vec2 v_uv;
 
	uniform OutlineFrag {
		vec4 outlineBaseColor;
	};
 
	#if USE_OUTLINE_BASE_COLOR_MAP
		uniform sampler2D outlineBaseColorMap;
	#endif
 
	vec4 frag () {
		vec4 color = outlineBaseColor;
		
		#if CC_NUM_DIR_LIGHTS > 0
		for (int i = 0; i < CC_NUM_DIR_LIGHTS; i++) {
				color *= cc_dirLightColor[i];
		}
		#endif
 
		#if USE_OUTLINE_BASE_COLOR_MAP
			CCTexture(outlineBaseColorMap, v_uv, color);
		#endif
 
		return vec4(color.rgb, 1.0);
	}
}%