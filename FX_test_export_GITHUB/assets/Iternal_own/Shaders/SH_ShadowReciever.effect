CCEffect %{
  techniques:
  - passes: 
		- stage: transparent
			vert: vs
			frag: fs
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: none
			properties:
				diffuseTexture: { value: white }
				diffuseColor: { value: [1, 1, 1, 1], editor: { type: color } }
				alphaThreshold: { value: 0.5 }
				mainTiling: { value: [1, 1] }
				mainOffset: { value: [0, 0] }
}%


CCProgram vs %{
  precision highp float;

	#include <cc-local>
	#include <cc-global>
	#include <skinning>
	#include <input-standard>
	#include <shadow>

	#define CC_USE_TEXTURE CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE

	uniform MAIN_TILING {
		vec2 mainTiling;
		vec2 mainOffset;
	};

	#if CC_USE_TEXTURE
		out mediump vec2 v_uv0;
	#endif

	#if CC_USE_ATTRIBUTE_COLOR
		out lowp vec4 v_color;
	#endif

	out highp vec3 i_normalDirection;
	out highp vec3 i_pos;
	out highp vec3 i_viewDirection;

	void main () {
		StandardVertInput In;
		CCVertInput(In);

		#if CC_USE_ATTRIBUTE_COLOR
			v_color = In.color;
		#endif

		#if CC_USE_TEXTURE
			v_uv0 = In.uv * mainTiling + mainOffset;
		#endif

		i_normalDirection = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);
		i_pos = (cc_matWorld * In.position).xyz;
		i_viewDirection = normalize(cc_cameraPos.xyz - i_pos);

		CCShadowInput(i_pos);

		gl_Position = cc_matViewProj * cc_matWorld * In.position;
	}
}%


CCProgram fs %{
	precision highp float;

	#include <cc-global>
	#include <cc-lights>
	#include <alpha-test>
	#include <texture>
	#include <output>

	uniform UNLIT {
		lowp vec4 diffuseColor;
	};

	#if USE_DIFFUSE_TEXTURE
		uniform sampler2D diffuseTexture;
	#endif

	#define CC_USE_TEXTURE CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE

	#if CC_USE_ATTRIBUTE_COLOR
		in lowp vec4 v_color;
	#endif

	#if CC_USE_TEXTURE
		in mediump vec2 v_uv0;
	#endif

	in highp vec3 i_normalDirection;
	in highp vec3 i_pos;
	in highp vec3 i_viewDirection;

	struct PhongSurface {
		float diffuse;
		float specular;

		vec3 normal;
		vec3 viewDirection;
	};

	Lighting _brdf(PhongSurface s, LightInfo info) {
		Lighting result;

		vec3 halfDir = normalize(s.viewDirection + info.lightDir);
		float NdotH = max(0.0, dot(s.normal, halfDir));

		result.diffuse = vec3(1, 1, 1) * max(0.0, dot(s.normal, info.lightDir));
		result.specular = vec3(1, 1, 1) * NdotH;

		return result;
	}

	vec3 _ambient(PhongSurface s, vec4 ambientColor) {
	  return vec3(0, 0, 0);
	}

	vec3 _CCPhongShading (PhongSurface s) {
		Lighting result;
		CC_CALC_LIGHTS(s, result, _brdf, _ambient)

		return result.diffuse + result.specular;
	}

	void main () {
		vec4 color = diffuseColor;

		#if CC_USE_TEXTURE
			CCTexture(diffuseTexture, v_uv0, color);
		#endif

		#if CC_USE_ATTRIBUTE_COLOR
			color *= v_color;
		#endif

		PhongSurface s;
		s.normal = i_normalDirection;
		s.viewDirection = i_viewDirection;

		vec3 shadow = _CCPhongShading(s);
		vec4 shadowColor = 1.0 - vec4(shadow, shadow.r);

		color *= shadowColor;

		ALPHA_TEST(color);

		gl_FragColor = CCFragOutput(color);
	}
}%