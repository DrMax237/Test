// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
	techniques:
	- passes:
		- name: main
			vert: vs
			frag: fs
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: none
			properties:
				_MainTex: { value: white, editor: { displayName: "Texture" } }
				_MainTexTillig: { value: [1, 1], editor: { displayName: "Tilling Texture"} }
				_MainTexOffset: { value: [0, 0], editor: { displayName: "Offset Texture"} }
				
				_Color: { value: [1, 1, 1, 1], editor: { displayName: "Main Color", type: color } }

				_SecondColorInterpol: { value: 0, editor: { displayName: "Second Color Interpol" } }
				_SecondColor: { value: [1, 1, 1, 1], editor: { displayName: "Second Color", type: color } }

				_Transparent: {value: 1.0, editor: { displayName: "Transparent" } }
				_AlphaThreshold: {value: 0.0, editor: { displayName: "Alpha Threshold" } }

				//Lighting and Shading
				_LightColor: { value: [1, 1, 1, 1], editor: {displayName: "Light Color", type: color } }
				_ShadowColor: { value: [1, 1, 1, 1], editor: {displayName: "Shadow Color", type: color } }

				_ShadowTest: { value: [1, 1, 1, 1], editor: { displayName: "Shadow", type: color } }

				//Specular
				_SpecularGlossiness: { value: 1, editor: { displayName: "Glossiness" } }
				_SpecularColor: { value: [1, 1, 1, 1], editor: {displayName: "Specular Color", type: color } }

				//Fog
				_FogColor: { value: [1, 1, 1, 1], editor: { displayName: "Fog Color", type: color } }
				_FogStart: { value: 100, editor: { displayName: "Fog Start" } }
				_FogEnd: { value: 200, editor: { displayName: "Fog End" } }
				_FarEdge: { value: 1, editor: { displayName: "Far Edge" } }
				_NearEdge: { value: 0, editor: { displayName: "Near Edge" } }

		- name: shadowcast
			stage: shadowcast
			vert: shadowvs
			frag: shadowfs
			rasterizerState:
				cullMode: back
			depthStencilState:
				depthTest: true
				depthWrite: true
}%




CCProgram vs %{
	precision highp float;

	#include <cc-global>
	#include <cc-local>
	#include <input-standard>
	#include <shadow>

	struct v2f {
		vec2 uv;
		vec4 position;
		vec4 color;
		vec4 screenPos;
		vec3 localPos;

		vec3 worldRefl;
	};

	#if LIGHTING
		uniform Lighting {
			vec4 _LightColor;
			vec4 _ShadowColor;
		};
	#endif

	out vec3 i_worldNormal;
	out vec3 i_worldPos;
	out vec3 i_viewDirection;

	out vec2 i_uv;
	out vec4 i_color;


	vec4 UnityObjectToClipPos(vec3 pos) {
		return cc_matViewProj * cc_matWorld * vec4(pos, 1.0);
	}
	vec3 UnityWorldSpaceViewDir(vec3 worldPos) {
		return cc_cameraPos.xyz - worldPos;
	}

	void main () {
		StandardVertInput v;
		CCVertInput(v);

		v2f o;

		o.position = cc_matViewProj * cc_matWorld * v.position;
		o.uv = v.uv;
		
		#if LIGHTING
			vec3 lightNormal = normalize(cc_matWorld * vec4(v.normal, 0.0)).xyz;

			if (lightNormal.y > 0.0) {
				o.color = mix(v.color, _LightColor + vec4(1.0), lightNormal.y * _LightColor.a);
			} else {
				o.color = mix(v.color, _ShadowColor, -lightNormal.y * _ShadowColor.a);
			}
		#else
			o.color = v.color;
		#endif

		i_worldNormal = normalize((cc_matWorldIT * vec4(v.normal, 0)).xyz);
		i_worldPos = (cc_matWorld * v.position).xyz;
		i_viewDirection = normalize(cc_cameraPos.xyz - i_worldPos);

		CCShadowInput(i_worldPos);
		
		i_color = o.color;
		i_uv = o.uv;
		
		gl_Position = o.position;
	}
}%


CCProgram fs %{
	precision highp float;

	#if USE_TEXTURE
		uniform sampler2D _MainTex;
		uniform MainTexture {
			vec2 _MainTexTillig;
			vec2 _MainTexOffset;
		};

		#if USE_TEXTURE_ALPHA
		#endif
	#endif

	#if USE_SPECULAR
		uniform Specular {
			vec4 _SpecularColor;
			float _SpecularGlossiness;
		};
	#endif


	#if USE_TRANSPARENT
		uniform Transparent {
			float _Transparent;	
		};

		#if USE_ALPHA_TEST
			uniform AlphaTest {
			    float _AlphaThreshold;
			};
		#endif
	#endif



	uniform Main {
		vec4 _Color;
		vec4 _SecondColor;

		float _SecondColorInterpol;
	};

	in vec3 i_worldNormal;
	in vec3 i_worldPos;
	in vec3 i_viewDirection;

	in vec2 i_uv;
	in vec4 i_color;

	uniform ShadowTest {
		vec4 _ShadowTest;
	};

	// #include <shading-phong>

	#include <cc-lights>

	struct PhongSurface {
		vec3 diffuse;
		vec3 specular;
		float opacity;

		float glossiness;

		vec3 position;
		vec3 normal;
		vec3 viewDirection;
	};

     vec3 i_ligthColor;

	#if USE_FOG
		uniform Fog {
			vec4 _FogColor;
			float _FogStart;
			float _FogEnd;
			float _FarEdge;
			float _NearEdge;
		};
	#endif


	Lighting _brdf (PhongSurface s, LightInfo info) {
		Lighting result;
		vec3 halfDir = normalize(s.viewDirection + info.lightDir);
        float NdotH = max(0.0, dot(s.normal, halfDir));
		NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));

		result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));
		result.specular = info.radiance * NdotH;

        i_ligthColor = i_ligthColor * info.radiance;

		return result;
	}

	vec3 _ambient(PhongSurface s, vec4 ambientColor) {
        i_ligthColor = i_ligthColor * ambientColor.rgb;
		return ambientColor.rgb;
	}

	vec4 _CCPhongShading (in PhongSurface s) {
		Lighting result;
		CC_CALC_LIGHTS(s, result, _brdf, _ambient)

		#if USE_SPECULAR
			s.specular += result.specular * s.specular;
		#endif

        vec4 color = vec4(result.diffuse.r, result.diffuse.g, result.diffuse.b, result.diffuse.r);
        color.rgb = i_ligthColor;
		return color;
	}
	
	vec4 Gradient(vec4 color1, vec4 color2, float ratio, float edge1, float edge2) {
		vec4 color;
		float step_ratio = smoothstep(edge1, edge2, ratio);
		color = mix(color1, color2, step_ratio);

		return color;
	}


	void main () {
		vec4 color = _Color * i_color;

		#if USE_TEXTURE
			vec4 t_color = texture(_MainTex, fract(i_uv * _MainTexTillig + ((vec2(1.0, 1.0) - vec2(1.0, 1.0) * _MainTexTillig) * _MainTexOffset)));
			color = color * t_color;

			color = mix(color, _SecondColor, _SecondColorInterpol);
		#endif	

		PhongSurface s;
		s.diffuse = vec3(1);
		s.opacity = 1.0;

		#if USE_SPECULAR 
			s.glossiness = _SpecularGlossiness;
			s.specular = _SpecularColor.rgb;
		#else 
			s.glossiness = 1.0;
		#endif
		
		s.position = i_worldPos;
		s.normal = i_worldNormal;
		s.viewDirection = i_viewDirection;

        i_ligthColor = vec3(1.0, 1.0, 1.0);

		vec4 temp = _CCPhongShading(s);
		#if USE_SPECULAR
			color.rgb += s.specular;
		#endif
		if (1.0 - temp.a < 0.5) {
			color = color;
		} else {
			float interpol = 1.0 - _ShadowTest.a;
			color.rgb = color.rgb * interpol + _ShadowTest.rgb * (1.0 - interpol);
		}

		#if USE_LIGHTING
	        color.rgb = color.rgb * temp.rgb;
		#endif
		color.a = 1.0;

		#if USE_FOG
			float fog_ratio = clamp((1.0 / gl_FragCoord.w - _FogStart) / (_FogEnd - _FogStart), 0.0, 1.0);
			fog_ratio = clamp(fog_ratio, 0.0, 1.0);
			color = Gradient(color, _FogColor, fog_ratio, _NearEdge, _FarEdge);
		#endif

		float alpha = 1.0;
		#if USE_TEXTURE
			#if USE_TEXTURE_ALPHA
				alpha = t_color.a;
			#endif
		#endif
		color.a = alpha;

		#if USE_TRANSPARENT
			color.a *= _Transparent;

			#if USE_ALPHA_TEST
			    if (color.a < _AlphaThreshold) discard;
			#endif
		#endif

		gl_FragColor = color;
	}
}%

CCProgram shadowvs %{
	precision highp float;

	in vec3 a_position;

	#include <cc-local>

	#pragma builtin(global)
	uniform CC_SHADOW_MAP {
		mat4  cc_shadow_map_lightViewProjMatrix;
		vec4  cc_shadow_map_info;
		float cc_shadow_map_bias;
	};

	out float i_depth;

	#include <skinning>

	void main () {
		vec4 position = vec4(a_position, 1);

		SKIN_VERTEX(position);

		gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;

		i_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;
	}
}%

CCProgram shadowfs %{
	precision highp float;

	in float i_depth;

	#include <packing>

	void main () {
		gl_FragColor = packDepthToRGBA(i_depth);
	}

}%