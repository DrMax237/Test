// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
	techniques:
	- passes:
		- name: main
			vert: vs
			frag: fs
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: none
			properties:
				_ColorMain: { value: [1, 1, 1, 1], editor: { displayName: "Diffuse Material Color", type: color } }
				_MidColor: { value: [1, 1, 1, 1], editor: { displayName: "Semishadow Material Color", type: color } }
				_SpecColor: { value: [1, 1, 1, 1], editor: { displayName: "Specular Material Color", type: color } }

				_Shininess: { value: 1.0, editor: { displayName: "Shininess" } }
				_AOFactor: { value: 1.0, editor: { displayName: "Ambient Occlusion Factor" } }
				_Transparency: { value: 1.0, editor: { displayName: "Transparency" } }
				// _GlobalLightIntensity: { value: 1.0, editor: { displayName: "Global Light Intensity" } }			
		- name: shadowcast
			stage: shadowcast
			vert: shadowvs
			frag: shadowfs
			rasterizerState:
				cullMode: back
			depthStencilState:
				depthTest: true
				depthWrite: true
}%




CCProgram vs %{
	precision highp float;

	#include <cc-global>
	#include <cc-local>
	// #include <output>
	#include <input-standard>
	#include <shadow>


	out vec3 i_normalDirection;
	out vec3 i_pos;
	out vec3 i_viewDirection;

	out vec3 i_normal;
	out vec4 i_color;
	out vec2 i_uv;


	vec4 UnityObjectToClipPos(vec3 pos) {
		return cc_matViewProj * cc_matWorld * vec4(pos, 1.0);
	}
	vec3 UnityWorldSpaceViewDir(vec3 worldPos) {
		return cc_cameraPos.xyz - worldPos;
	}

	void main () {
		StandardVertInput v;
		CCVertInput(v);

		i_normal = v.normal;
		i_normalDirection = normalize((cc_matWorldIT * vec4(v.normal, 0)).xyz);
		i_pos = (cc_matWorld * v.position).xyz;
		i_viewDirection = normalize(cc_cameraPos.xyz - i_pos);
		i_uv = v.uv;
		i_color = v.color;

		CCShadowInput(i_pos);
		
		gl_Position = cc_matViewProj * cc_matWorld * v.position;
	}
}%


CCProgram fs %{
	precision highp float;

	#include <cc-global>
	#include <cc-lights>

	uniform Main {
		vec4 _ColorMain;
		vec4 _MidColor;
		vec4 _SpecColor;
		float _Shininess;
		float _AOFactor;
		float _Transparency;
	};

	in vec3 i_normalDirection;
	in vec3 i_pos;
	in vec3 i_viewDirection;

	in vec3 i_normal;
	in vec2 i_uv;
	in vec4 i_color;

	
	struct PhongSurface {
		float diffuse;
		float specular;

		vec3 normal;
		vec3 viewDirection;
	};

	Lighting _brdf(PhongSurface s, LightInfo info) {
		Lighting result;

		vec3 halfDir = normalize(s.viewDirection + info.lightDir);
		float NdotH = max(0.0, dot(s.normal, halfDir));

		result.diffuse = vec3(1, 1, 1) * max(0.0, dot(s.normal, info.lightDir));
		result.specular = vec3(1, 1, 1) * NdotH;

		return result;
	}

	vec3 _ambient(PhongSurface s, vec4 ambientColor) {
	  	return vec3(0, 0, 0);
	}

	vec3 _CCPhongShading (PhongSurface surface) {
		Lighting result;
	  	CC_CALC_LIGHTS(surface, result, _brdf, _ambient)

	  	return result.diffuse + result.specular;
	}

	float _smoothstep(float edge0, float edge1, float x) {
		float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
	    return t * t * (3.0 - 2.0 * t);
	}


	void main () {
		vec3 viewDirection = i_viewDirection;
		vec3 normalDirection = i_normalDirection;
		vec3 lightDirection = vec3(0, 1, 0);

		#if CC_LIGHT_0_TYPE == 0
			#if CC_NUM_LIGHTS > 0
				lightDirection = -normalize(cc_lightDirection[0].xyz);
			#endif			
		#elif CC_LIGHT_1_TYPE == 0 
			#if CC_NUM_LIGHTS > 1
				lightDirection = -normalize(cc_lightDirection[1].xyz);
			#endif	
		#elif CC_LIGHT_2_TYPE == 0 
			#if CC_NUM_LIGHTS > 2
				lightDirection = -normalize(cc_lightDirection[2].xyz);
			#endif	
			
		#elif CC_LIGHT_3_TYPE == 0 
			#if CC_NUM_LIGHTS > 3
				lightDirection = -normalize(cc_lightDirection[3].xyz);
			#endif	
		#endif

		
		PhongSurface s;
		s.normal = i_normalDirection;
		s.viewDirection = i_viewDirection;
		

		vec3 shadow = _CCPhongShading(s);
		float interpol = shadow.r;
		
		float _factor = max(0.0, dot(normalDirection, lightDirection) * 0.5 + 0.5 * pow(max(0.0, dot(reflect(-lightDirection, normalDirection), viewDirection)), _Shininess));
		float fogColorFactor = mix(_factor, _factor * (i_color.r - 0.5) * 2.0, _AOFactor);
		float factor = fogColorFactor * interpol;
		float factorl = floor(factor + 0.5);
		
		vec3 tempcolshadowmid = mix(vec3(_ColorMain.rgb), vec3(_MidColor.rgb), min(1.0, max(0.0, factor * 2.0)));
		vec3 tempcolmidlight = mix(_MidColor.rgb, _SpecColor.rgb, min(1.0, max(0.0, (factor - 0.5) * 2.0)));

		vec3 tempcol = vec3(0, 0, 0);

		if (factorl < 1.0) {
			tempcol = tempcolshadowmid;
		} else {
			tempcol = tempcolmidlight;
		}


		gl_FragColor = vec4(tempcol, _Transparency);
	}
}%

CCProgram shadowvs %{
	precision highp float;

	in vec3 a_position;

	#include <cc-local>

	#pragma builtin(global)
	uniform CC_SHADOW_MAP {
		mat4  cc_shadow_map_lightViewProjMatrix;
		vec4  cc_shadow_map_info;
		float cc_shadow_map_bias;
	};

	out float i_depth;

	#include <skinning>

	void main () {
		vec4 position = vec4(a_position, 1);

		SKIN_VERTEX(position);

		gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;

		i_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;
	}
}%

CCProgram shadowfs %{
	precision highp float;

	in float i_depth;

	#include <packing>

	void main () {
		gl_FragColor = packDepthToRGBA(i_depth);
	}

}%