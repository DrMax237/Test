// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
	techniques:
	- passes:
		- name: main
			vert: vs
			frag: fs
			depthStencilState:
				depthTest: true
				depthWrite: true
			blendState:
				targets:
				- blend: true
			rasterizerState:
				cullMode: none
			properties:
				_MainTex: { value: white, editor: { displayName: "Texture" } }
				_SpecularColor: { value: [1, 1, 1, 1], editor: { displayName: "Specular Color", type: color } }
				_Glossiness: { value: 0.0, editor: { displayName: "Glossiness" } }

				_DiffuseColor: { value: [1, 1, 1, 1], editor: { displayName: "Diffuse Color", type: color } }
				_ShadowColor: { value: [1, 1, 1, 1], editor: {displayName: "Shadow Color", type: color } }
				_ShadowSmooth: { value: 0.01, editor: { displayName: "Shadow Smooth" } }

				//SHADOW_CUTOFF
				_ShadowCutoff: { value: 0.0, editor: { displayName: "Shadow Cutoff" } }
				

				
		- name: shadowcast
			stage: shadowcast
			vert: shadowvs
			frag: shadowfs
			rasterizerState:
				cullMode: back
			depthStencilState:
				depthTest: true
				depthWrite: true
}%




CCProgram vs %{
	precision highp float;

	#include <cc-global>
	#include <cc-local>
	// #include <output>
	#include <input-standard>
	#include <shadow>


	out vec3 i_worldNormal;
	out vec3 i_worldPos;
	out vec3 i_viewDirection;

	out vec2 i_uv;


	vec4 UnityObjectToClipPos(vec3 pos) {
		return cc_matViewProj * cc_matWorld * vec4(pos, 1.0);
	}
	vec3 UnityWorldSpaceViewDir(vec3 worldPos) {
		return cc_cameraPos.xyz - worldPos;
	}

	void main () {
		StandardVertInput v;
		CCVertInput(v);

		i_worldNormal = normalize((cc_matWorldIT * vec4(v.normal, 0)).xyz);
		i_worldPos = (cc_matWorld * v.position).xyz;
		i_viewDirection =  normalize(cc_cameraPos.xyz - i_worldPos);
		i_uv = v.uv;

		CCShadowInput(i_worldPos);
		
		gl_Position = cc_matViewProj * cc_matWorld * v.position;
	}
}%


CCProgram fs %{
	precision highp float;

	#include <cc-global>
	#include <cc-lights>

	uniform sampler2D _MainTex;
	uniform Main {
		vec4 _SpecularColor;
		vec4 _DiffuseColor;
		vec4 _ShadowColor;
		float _Glossiness;
		float _ShadowSmooth;
	};

	in vec3 i_worldNormal;
	in vec3 i_worldPos;
	in vec3 i_viewDirection;

	in vec2 i_uv;


	#if SHADOW_CUTOFF
		uniform ShadowCutoff {
			float _ShadowCutoff;
		};
	#endif

	
	struct PhongSurface {
		vec3 diffuse;
		float opacity;
		vec3 position;
		vec3 normal;
		vec3 viewDirection;
	};


	Lighting _brdf (PhongSurface s, LightInfo info) {
		Lighting result;
		vec3 halfDir = normalize(s.viewDirection + info.lightDir);
		float NdotH = max(0.0, dot(s.normal, halfDir));

		result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));

		return result;
	}

	vec3 _ambient(PhongSurface s, vec4 ambientColor) {
		return ambientColor.rgb;
	}

	vec4 _CCPhongShading (in PhongSurface s) {
		Lighting result;
		CC_CALC_LIGHTS(s, result, _brdf, _ambient)

		return vec4(result.diffuse.r, result.diffuse.g, result.diffuse.b, s.opacity);
	}

	float _smoothstep(float edge0, float edge1, float x) {
		float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
	    return t * t * (3.0 - 2.0 * t);
	}


	void main () {
		vec3 _WorldSpaceLightPos0 = vec3(1, 1, 1);

		#if CC_NUM_LIGHTS > 0
			vec3 _temp = vec3(0, 0, 0);
			#if CC_LIGHT_0_TYPE == 0
				_temp = cc_lightDirection[0].xyz;
			#elif CC_LIGHT_1_TYPE == 0 
				_temp = cc_lightDirection[1].xyz;
			#elif CC_LIGHT_2_TYPE == 0 
				_temp = cc_lightDirection[2].xyz;
			#elif CC_LIGHT_3_TYPE == 0 
				_temp = cc_lightDirection[3].xyz;
			#endif

			_WorldSpaceLightPos0 = - _temp;
			// normalize(vec3(1.0 - _temp.x, 1.0 - _temp.y, 1.0 - _temp.z));
		#endif

		vec4 sample = texture(_MainTex, i_uv);

		vec3 normal = normalize(i_worldNormal);
        vec3 viewDir = normalize(i_viewDirection);

        float NdotL = dot(_WorldSpaceLightPos0, normal);

		PhongSurface s;
		s.diffuse = vec3(1);
		s.opacity = 1.0;
		s.normal = i_worldNormal;
		s.position = i_worldPos;
		s.viewDirection = i_viewDirection;
		vec4 temp = _CCPhongShading(s);

		float shadow = temp.r;

		#if SHADOW_CUTOFF
			float lightIntensity = _smoothstep(0.0, _ShadowSmooth, (NdotL - _ShadowCutoff) * shadow);
		#else
			float lightIntensity = _smoothstep(0.0, _ShadowSmooth, NdotL * shadow);
		#endif

		vec3 halfVector = normalize(_WorldSpaceLightPos0 + viewDir);
		float NdotH = dot(normal, halfVector);
		
		float specularIntensity = pow(NdotH * lightIntensity, _Glossiness * _Glossiness);
		float specularIntensitySmooth = _smoothstep(0.005, 0.01, specularIntensity);
		vec4 specular = specularIntensitySmooth * _SpecularColor; 

		vec4 color = sample * ((_DiffuseColor + specular) * lightIntensity + _DiffuseColor * _ShadowColor * (1.0 - lightIntensity));

		gl_FragColor = color;
	}
}%

CCProgram shadowvs %{
	precision highp float;

	in vec3 a_position;

	#include <cc-local>

	#pragma builtin(global)
	uniform CC_SHADOW_MAP {
		mat4  cc_shadow_map_lightViewProjMatrix;
		vec4  cc_shadow_map_info;
		float cc_shadow_map_bias;
	};

	out float i_depth;

	#include <skinning>

	void main () {
		vec4 position = vec4(a_position, 1);

		SKIN_VERTEX(position);

		gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;

		i_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;
	}
}%

CCProgram shadowfs %{
	precision highp float;

	in float i_depth;

	#include <packing>

	void main () {
		gl_FragColor = packDepthToRGBA(i_depth);
	}

}%